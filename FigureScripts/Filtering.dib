#!fsharp

#r "nuget: SimpleImageIO"
#r "../../imageLab/ImageLab.Flip/bin/Release/net6.0/ImageLab.Flip.dll"
#r "../../imageLab/ImageLab.Flip/bin/Release/net6.0/ImageLab.GUI.dll"
#load "Util.fsx"
open Util
open ImageLab.Flip
open ImageLab.GUI.Util
open SimpleImageIO

#!fsharp

// Our filter primitives: blur, dilate then blur, and do nothing
let blur radius (img:MonochromeImage) = 
    let buf = new MonochromeImage(img.Width, img.Height)
    Filter.RepeatedBox(img, buf, radius)
    buf

let dilate radius (img:MonochromeImage) =
    let buf = new MonochromeImage(img.Width, img.Height)
    Filter.Dilation(img, buf, radius)
    buf

let dilateBlur dilateRadius blurRadius = dilate dilateRadius >> blur blurRadius

let noop img = img

let tile size (img:MonochromeImage) = 
    let buf = new MonochromeImage(img.Width, img.Height)
    for tileRow in 0..img.Height / size - 1 do
        for tileCol in 0..img.Width / size - 1 do
            let mutable avg = 0.0f
            let mutable num = 0f
            let lastRow = min ((tileRow + 1) * size) img.Height
            let lastCol = min ((tileCol + 1) * size) img.Width
            for row in tileRow * size .. lastRow - 1 do
                for col in tileCol * size .. lastCol - 1 do
                    avg <- avg + img.GetPixel(col, row)
                    num <- num + 1f
            avg <- avg / num
            for row in tileRow * size .. lastRow - 1 do
                for col in tileCol * size .. lastCol - 1 do
                    buf.SetPixel(col, row, avg)
    buf

#!markdown

# Filter parameters

This notebook analyses the effect of different filter parameters on two example scenes. 

`RoughGlasses` is a simple case with comparatively little noise in the second moment estimates. 

`Pool` is the most challenging scene. Most light paths never find the visible region and the noise in the second moments with just one iteration of VCM is severe.

Below we show the 1spp renderings from which the second moments are computed for both scenes. Note how the caustics at the bottom of the pool manifest only as a small number of outliers.

#!fsharp

let ShowRenders scene  exposure =
    let mapExposure = new ToneMapExposure()
    mapExposure.Exposure <- exposure
    let dir = "../VcmExperiment/Results/Filtering/" + scene
    let reference = new RgbImage(Path.Join(dir, "Reference.exr"))
    let render = new RgbImage(Path.Join(dir, "MomentEstimator", "Render.exr"))
    HTML(Flip.Make[|
        struct("Render", mapExposure.Apply(render) :> ImageBase)
        struct("Reference", mapExposure.Apply(reference) :> ImageBase)
    |]).Display() |> ignore

ShowRenders "RoughGlasses" 0f
ShowRenders "Pool" -4f

#!fsharp

let EvaluateFilters scene preOps postOps =
    let groundTruthDir = "../VcmExperiment/Results/GroundTruth/" + scene
    let convergedMasks = Layers.LoadFromFile(groundTruthDir + $"/Masks.exr")

    let mutable masks = [|
        for preName, pre in preOps do
            for postName, post in postOps do
                let (mask, _, _) = OptimizeWithFilter scene 1f pre post noop
                struct($"{preName}-{postName}", mask :> ImageBase)
    |]
    masks <- Array.insertAt 0 struct("Reference", convergedMasks["merge-moment"]) masks

    HTML(Flip.Make(masks))

#!markdown

## Blurring the moments

First, we compute the merge masks by only blurring the second moments. The masks below are the results without blurring, and with different blur radii.

A small amount of blur greatly reduces the noise and avoids many false-positives, where merging is enabled in a pixel due to noisy second moment estimates.

Blurring too much introduces artifacts because incompatible information is mixed. A good example are the small glass dice at the bottom of the `RoughGlasses` scene. These vanish from the merge mask if a too aggressive blur is used.

Note that in the extreme case of the `Pool` scene no amount of blur can fill all the gaps.

#!fsharp

EvaluateFilters "RoughGlasses"
<|
[
    "None", noop
    "Blur1", blur 1
    "Blur3", blur 3
    "Blur8", blur 8
    "Blur10", blur 10
    "Blur100", blur 100
]
<|
[
    "None", noop
]

#!fsharp

EvaluateFilters "Pool"
<|
[
    "None", noop
    "Blur1", blur 1
    "Blur3", blur 3
    "Blur10", blur 10
    "Blur100", blur 100
]
<|
[
    "None", noop
]

#!markdown

## Dilating the mask

To support challenging cases like `Pool`, we err on the side of caution and dilate the mask. Below, we apply dilation (using a box kernel) with different radii. In all cases, the second moments are blurred with a radius of 3.

The `Pool` scene requires very strong dilation to fill all the gaps, while the `RoughGlasses` could produce a more accurate mask with a smaller dilation radius.

We opt for robustness and dilate with a radius of 16, which works even for the most challenging `Pool` scene. Future work could investigate how to automatically adapt the radius of this dilation.

#!fsharp

EvaluateFilters "Pool"
<|
[
    "Blur3", blur 3
]
<|
[
    "Dilate1", dilate 1
    "Dilate2", dilate 2
    "Dilate4", dilate 4
    "Dilate8", dilate 8
    "Dilate16", dilate 16
    "Dilate32", dilate 32
]

#!fsharp

EvaluateFilters "RoughGlasses"
<|
[
    "Blur3", blur 3
]
<|
[
    "Dilate1", dilate 1
    "Dilate2", dilate 2
    "Dilate4", dilate 4
    "Dilate8", dilate 8
    "Dilate16", dilate 16
    "Dilate32", dilate 32
]

#!markdown

## Blur after dilate

The hard edges in the mask can cause visible discontinuities in the noise patterns. An easy remedy for that problem is to blur the mask after dilation (during rendering, non-integer values are stochastically rounded). Below, we compare different radii for such a blur, combined with the best dilation for each scene.

The impact of this blur is rather minor. In the pool scene, a larger blur can fill in some residual gaps in the mask.

#!fsharp

EvaluateFilters "RoughGlasses"
<|
[
    "Blur3", blur 3
]
<|
[
    "Dilate8", dilate 8
    "Dilate8-Blur1", dilateBlur 8 1
    "Dilate8-Blur2", dilateBlur 8 2
    "Dilate8-Blur4", dilateBlur 8 4
    "Dilate8-Blur8", dilateBlur 8 8
    "Dilate8-Blur16", dilateBlur 8 16
    "Dilate8-Blur32", dilateBlur 8 32
]

#!fsharp

EvaluateFilters "Pool"
<|
[
    "Blur3", blur 3
]
<|
[
    "Dilate16", dilate 16
    "Dilate16-Blur1", dilateBlur 16 1
    "Dilate16-Blur2", dilateBlur 16 2
    "Dilate16-Blur4", dilateBlur 16 4
    "Dilate16-Blur8", dilateBlur 16 8
    "Dilate16-Blur16", dilateBlur 16 16
    "Dilate16-Blur32", dilateBlur 16 32
]

#!markdown

## Conclusion

For our results, we used agressive filter parameters that work even for the most challenging `Pool` scene. This sacrifices some efficiency in simpler scenes but ensures robustness. 

Our filtering is a very simple ad-hoc denoising scheme for the second moment images. Our requirements are different from that of a typical denoiser. For example, we apply dilation to combat the missing data problem and propagate information from outliers across large regions of the image. Designing more elaborate, and hence more effective and efficient, denoisers specifically for the second moment / variance images and computed sample masks used by our method is a promising direction for future work.

Another improvement would be to postpone the mask creation and use more than just one sample per pixel to estimate the second moments. This is a trade-off: In some scenes, the more accurate moments will result in much higher efficiency. In other scenes, the noise in the moments is already low enough after one sample and the longer pilot iteration is wasteful. Ideas from adaptive sampling methods could be used to automatically determine the best duration of the pilot.

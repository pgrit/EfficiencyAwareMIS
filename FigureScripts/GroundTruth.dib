#!csharp

// Image viewer
#r "../../imageLab/ImageLab.Flip/bin/Release/net6.0/ImageLab.Flip.dll"
#r "nuget: SimpleImageIO"

// Plotting stuff
#r "nuget: Plotly.NET, 2.0.0-preview.18"
#r "nuget: Plotly.NET.Interactive, 2.0.0-preview.18"

using Plotly.NET;
using System.IO;
using SimpleImageIO;
using ImageLab.Flip;
using ImageLab.GUI.Util;

HTML(Flip.MakeHeader())

#!markdown

Utility code to load the images and related values (sample counts, ratios, masks, ...)

#!csharp

FalseColor connectColor = new(new LinearColormap(0, 16));
FalseColor mergeColor = new(new LinearColormap(0, 1));

void ShowMasks(string scene, float exposure = 0.0f, string suffix = "") {
    string dirname = "../VcmExperiment/Results/GroundTruth/" + scene;
    ToneMapExposure mapExposure = new() { Exposure = exposure };

    var masks = Layers.LoadFromFile(dirname + $"/Masks{suffix}.exr");
    var connectVar = connectColor.Apply(masks["connect-var"]);
    ImageBase mergeVar = mergeColor.Apply(masks["merge-var"]);
    var connectMoment = connectColor.Apply(masks["connect-moment"]);
    ImageBase mergeMoment = mergeColor.Apply(masks["merge-moment"]);
    var reference = new RgbImage(dirname + "/Reference.exr");
    var lines = System.IO.File.ReadAllLines(dirname + $"/GlobalCounts{suffix}.txt");

    bool mergeForcedOffVar = int.Parse(lines[1]) == 0;
    bool mergeForcedOffMoment = int.Parse(lines[3]) == 0;
    if (mergeForcedOffVar) mergeVar = masks["merge-var"]; // gray it out by disabling false color
    if (mergeForcedOffMoment) mergeMoment = masks["merge-moment"]; // gray it out by disabling false color

    HTML(Flip.Make(
        ("ConnectVar", connectVar), ("MergeVar", mergeVar), 
        ("ConnectMoment", connectMoment), ("MergeMoment", mergeMoment), 
        ("Reference", mapExposure.Apply(reference))
    )).Display();

    // Read the global decisions and display them
    HTML("<p>Number of light paths:</p>").Display();    
    new Dictionary<string, (int NumLightPaths, bool EnableMerging)>() { 
        { "Variance", (int.Parse(lines[0]), int.Parse(lines[1]) != 0) }, 
        { "Moment", (int.Parse(lines[2]), int.Parse(lines[3]) != 0) },
        { "Variance (abs.)", (int.Parse(lines[4]), int.Parse(lines[5]) != 0) }, 
        { "Moment (abs.)", (int.Parse(lines[6]), int.Parse(lines[7]) != 0) }
    }.Display();

    HTML("<p>Global optimization:</p>").Display();
    new Dictionary<string, (int NumLightPaths, int NumConnections, bool EnableMerging)>() {
        { "Variance", (int.Parse(lines[8]), int.Parse(lines[9]), bool.Parse(lines[10])) },
        { "Moment", (int.Parse(lines[11]), int.Parse(lines[12]), bool.Parse(lines[13])) },
    }.Display();
}

void ShowRenders(string scene, float exposure = 0.0f) {
    string dirname = "../VcmExperiment/Results/GroundTruth/" + scene;
    ToneMapExposure mapExposure = new() { Exposure = exposure };
    var reference = new RgbImage(dirname + "/Reference.exr");
    var pathTracer = new RgbImage(dirname + "/n=000000,c=00,m=0/Render.exr");
    var vcm = new RgbImage(dirname + "/n=307200,c=04,m=1/Render.exr");
    var bdpt = new RgbImage(dirname + "/n=307200,c=04,m=0/Render.exr");
    var lt = new RgbImage(dirname + "/n=307200,c=00,m=0/Render.exr");
    HTML(Flip.Make(
        ("Reference", mapExposure.Apply(reference)),
        ("PT", mapExposure.Apply(pathTracer)),
        ("PT+LT", mapExposure.Apply(lt)),
        ("BDPT", mapExposure.Apply(bdpt)),
        ("VCM", mapExposure.Apply(vcm))
    )).Display();
}

void CompareMomentVarRatio(string scene, string firstCandidate, string secondCandidate, float exposure = 0.0f) {
    string dirname = "../VcmExperiment/Results/GroundTruth/" + scene;

    var moments = Layers.LoadFromFile(dirname + $"/Moments.exr");
    var variances = Layers.LoadFromFile(dirname + $"/Variances.exr");
    var reference = new RgbImage(dirname + "/Reference.exr");
    var ptMoment = moments[firstCandidate];
    var bdptMoment = moments[secondCandidate];
    var ptVariance = variances[firstCandidate];
    var bdptVariance = variances[secondCandidate];

    MonochromeImage momentRatio = new(640, 480);
    MonochromeImage varianceRatio = new(640, 480);
    float avgMomentRatio = 0.0f;
    float avgVarRatio = 0.0f;
    for (int row = 0; row < momentRatio.Height; ++row) {
        for (int col = 0; col < momentRatio.Width; ++col) {
            float ratio = ptMoment.GetPixelChannel(col, row, 0) / bdptMoment.GetPixelChannel(col, row, 0);
            float ratioVar = ptVariance.GetPixelChannel(col, row, 0) / bdptVariance.GetPixelChannel(col, row, 0);

            if (!float.IsFinite(ratio) || ratio <= 0 || reference.GetPixel(col, row) == RgbColor.Black) ratio = 1;
            if (!float.IsFinite(ratioVar) || ratioVar <= 0 || reference.GetPixel(col, row) == RgbColor.Black) ratioVar = 1;

            momentRatio.SetPixel(col, row, MathF.Log(ratio));
            varianceRatio.SetPixel(col, row, MathF.Log(ratioVar));
            
            avgMomentRatio += MathF.Log(ratio) / (640 * 480);
            avgVarRatio += MathF.Log(ratioVar) / (640 * 480);
        }
    }
    avgMomentRatio = MathF.Exp(avgMomentRatio);
    avgVarRatio = MathF.Exp(avgVarRatio);

    FalseColorMap ratioColor = new();
    var momentRatioColor = ratioColor.Apply(momentRatio);
    var varianceRatioColor = ratioColor.Apply(varianceRatio);
    ToneMapExposure mapExposure = new() { Exposure = exposure };

    HTML("<p>Geometric mean of per-pixel ratios:<p>").Display();
    (new[] { avgMomentRatio, avgVarRatio }).Display();
    HTML(Flip.Make(
        ("Moment ratio", momentRatioColor), 
        ("Variance ratio", varianceRatioColor),
        ("Reference", mapExposure.Apply(reference))
    )).Display();
}

#!markdown

## Comparison of moments and variances

First, we compare the moments and variances directly. The cells below visualize the per-pixel ratio between the moments and the  variances of two candidates.

Our approach is optimal, if moments and variances are roughly proportional. In that case, the two ratio images shown below should be identical.

#!markdown

### A "good" case

The best case of our method are scenes that are challenging to render. The `HotLivingMod` (aka `Fish`) below is one such case. The ratio between path tracing and path light tracing is almost the same everywhere, with the sole exception of a small low-variance directly lit region in the bottom left.

#!csharp

CompareMomentVarRatio("HotLivingMod", $"n={0:000000},c=00,m=0", $"n={640*480*2:000000},c=00,m=0");

#!markdown

### Correlation

The first problematic scenario is correlation, either in connections or in merges. Below, we compare ratios of different candidates on the `VeachBidir` scene.

First, we show two uncorrelated techniques (BDPT with zero or a single connection). The ratios of moments and variances are identical.

#!csharp

CompareMomentVarRatio("VeachBidir", $"n={640*480:000000},c=00,m=0", $"n={640*480:000000},c=01,m=0");

#!markdown

If, however, we use a large number of connections (here 16), the correlation becomes visible. Second moments strongly overestimate the value of the additional connections in most regions of the scene (the predominately indirectly lit ones).

#!csharp

CompareMomentVarRatio("VeachBidir", $"n={640*480:000000},c=00,m=0", $"n={640*480:000000},c=16,m=0");

#!markdown

An even more severe case arises with merging. As the variance ratios shows, adding merges actually _increases_ the variance. Note that this is despite the fact that we use correl-aware MIS. Without correl-aware, this would be even more drastic. The second moments hugely overestimate the utility of merging in this scene.

#!csharp

CompareMomentVarRatio("VeachBidir", $"n={640*480:000000},c=00,m=0", $"n={640*480:000000},c=00,m=1");

#!markdown

### Low-variance cases

The other failure case are scenes (or regions of scenes) that are trivial to render with unidirectional path tracing. (The problem tackled by var-aware MIS). The `House` below is such a case. We compare path tracing and path tracing + light tracing (i.e., BDPT with no connections). Adding light tracing increases the variance due to poor MIS weights (we are not using variance-aware MIS). The second moments instead reduce significantly.

#!csharp

CompareMomentVarRatio("House", $"n={0:000000},c=00,m=0", $"n={640*480*2:000000},c=00,m=0");

#!markdown

# Optimization with converged estimates

Below, we show and analyse the results of running our optimization on converged error estimates. Variances are estimated by rendering 128 iterations with each candidate strategy and computing the MSE compared to the reference image. We run OpenImageDenoise on the MSE images to combat noise. (Upping the sample count by a factor of 10 would increase the render time by a factor of around 600 so we cannot compute converged estimates for all scenes.)

#!markdown

The cell below lists all scenes that have been rendered.

#!csharp

var scenes = from path in Directory.EnumerateDirectories("../VcmExperiment/Results/GroundTruth/")
             select Path.GetFileName(path);
scenes

#!markdown

The cell below lists the different cost heuristic scaling factors that have been generated.

#!csharp

from path in Directory.EnumerateFiles("../VcmExperiment/Results/GroundTruth/HotLivingMod")
where path.Contains("Cost") && path.Contains(".exr")
select Path.GetFileNameWithoutExtension(path).Substring(5)

#!markdown

Supported suffixes are:
- empty string (full VCM)
- all cost heuristic variants listed above
- "BDPT" (merges disabled)

#!csharp

ShowMasks("HomeOffice", 0, "");
ShowRenders("HomeOffice", 0);

#!csharp

ShowMasks("VeachBidir", 0, "");
ShowRenders("VeachBidir", 0);

#!markdown

## Cost heuristic vs render time

#!markdown

We plot the render time and heuristic values along one of the three dimensions (number of light paths, connections, merging). The values are normalized: we plot the increase in cost compared to the smallest value along the same dimension.

If the "ratio" is less than 1, our method underestimates the increase in cost, compared to the actual render time.

#!csharp

GenericChart.GenericChart Variation(string scene, int? n, int? c, bool? m) {
    string json = File.ReadAllText(Path.Join("../VcmExperiment/Results/GroundTruth/", scene, "Costs.json"));
    var times = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, float[]>>(json);

    string pattern = @"n=(\d+),c=(\d+),m=(\d)";
    var candidates = times.Select(c => {
        var groups = System.Text.RegularExpressions.Regex.Match(c.Key, pattern).Groups;
        return (int.Parse(groups[1].Value), int.Parse(groups[2].Value), groups[3].Value == "1");
    });

    (float Heuristic, float Time) GetTime(int n, int c, bool m) {
        var t = times[$"n={n:000000},c={c:00},m={(m?1:0)}"];
        return (t[0], t[1]);
    }

    List<(float, float, float)> values = new();
    foreach (var can in candidates) {
        if (n != null && can.Item1 != n ||
            m != null && can.Item3 != m || 
            c != null && can.Item2 != c) 
            continue;
        var t = GetTime(can.Item1, can.Item2, can.Item3);
        values.Add((n == null ? can.Item1 : (c == null ? can.Item2 : (can.Item3 ? 1 : 0)), t.Time, t.Heuristic));
    }
    var sorted = from v in values orderby v.Item1 select v;
    var x = from v in sorted select v.Item1;
    var a = from v in sorted select v.Item2 / sorted.First().Item2;
    var b = from v in sorted select v.Item3 / sorted.First().Item3;
    var ratio = from v in sorted select (v.Item3 / sorted.First().Item3) / (v.Item2 / sorted.First().Item2);

    return Chart.Combine(new List<GenericChart.GenericChart>() {
        Chart2D.Chart.Line<float, float, string>(x, a, Name: "Time"),
        Chart2D.Chart.Line<float, float, string>(x, b, Name: "Heuristic"),
        Chart2D.Chart.Line<float, float, string>(x, ratio, Name: "Ratio"),
    }).WithMarginSize<float, float, float, float, float, float>(0.0f, 0.0f, 0.0f, 0.0f).WithSize(500, 300);
}

#!markdown

Cost as a function of the number of connections, for fixed number of light paths and merging decision.

#!csharp

foreach (string scene in scenes) {
    HTML($"<h4>{scene}</h4>").Display();
    Variation(scene, 640 * 480, null, false).Display();
    Variation(scene, 640 * 480, null, true).Display();
}

#!markdown

Cost of merging with fixed number of light paths and no connections.

#!csharp

foreach (string scene in scenes) {
    HTML($"<h4>{scene}</h4>").Display();
    Variation(scene, 640 * 480, 0, null).Display();
}

#!markdown

The cell below runs our optimizer on a scene where the cost heuristic is a close match to the render time: `Lamp caustic`. We then arbitrarily distort the relative cost of merging by up to one order of magnitude in both directions.

#!csharp

HTML("<h3>Correct costs</h3>").Display();
ShowRenders("LampCaustic", 0);
ShowMasks("LampCaustic", 0, "");

HTML("<h3>Merges 10x cheaper</h3>").Display();
ShowMasks("LampCaustic", 0, "CostMerge0.1");
HTML("<h3>Merges 2x cheaper</h3>").Display();
ShowMasks("LampCaustic", 0, "CostMerge0.5");
HTML("<h3>Merges 2x more expensive</h3>").Display();
ShowMasks("LampCaustic", 0, "CostMerge2");
HTML("<h3>Merges 10x more expensive</h3>").Display();
ShowMasks("LampCaustic", 0, "CostMerge10");
